This file presents sample scripts for using the ebook data in the sqlite3 database table "main" using the Subject headings EBSCO provides in combination with title keywords because many HLM records have no subject headings.

  ---Count number of titles (resources) by vendorname:
  select VendorName , count(vendorname) VendorCount from main group by VendorName order by VendorCount desc;

--- simple subject/title search without using the kbid_subject table, just main:
SELECT * FROM main m WHERE
CASE
 WHEN Title like '%Food%' THEN 1 
 WHEN Title like '%Nutrition%' THEN 1
 WHEN Title like '%Cooking%' THEN 1
 WHEN Subject like '%Nutrition%' THEN 1
 WHEN Subject like '%Restaurants%' THEN 1
 WHEN Subject like '%Food-- Cooking & Entertaining%' THEN 1
 WHEN Subject like '%Foodservice Industry%' THEN 1
 WHEN Subject like '%Frozen Food Industry%' THEN 1
 WHEN Subject like '%Snack Food Industry%' THEN 1
 WHEN Subject like '%SOCIAL SCIENCE / Agriculture & Food%' THEN 1
 WHEN Subject like '%Food Science%' THEN 1
 WHEN Subject like '%BUSINESS & ECONOMICS / Industries / Food Industry%' THEN 1
   END = 1;

-- combining title, subject, and locally-saved LC call numbers for a simple subject count
select kbid, title, managedcoveragebegin, packagename, UPEIAccessNote 
from main 
where 
ResourceType like 'Book' AND
(subject like '%psych%' or title like '%psych%' or callnumber like 'bf%'); --- sqlite3 "like" is case insensitive

--- note that sqlite3 doesn't have a proper "regexp" function; you can do some things with "GLOB" but more complicated ones it's better
--- to write a python script that interacts with the sqlite3 database, so the python script does the complex regex work

--- you could edit these GLOBs to more specific LC range targets eg by specifying [Bb] instead of [A-Za-z] to get just the B-BZa
select distinct CallNumber FROM main --- CallNumber is UPEI's renaming of UserDefinedField5
WHERE CallNumber IS NOT NULL AND
      (
          CallNumber GLOB '[A-Za-z][0-9][0-9]?[0-9]?[0-9]' OR                                  -- One letter followed by 1-4 digits, nothing after
          CallNumber GLOB '[A-Za-z][0-9][0-9]?[0-9]?[0-9][A-Za-z \.]*' OR                     -- One letter, digits, followed by letter, space, or literal period
          CallNumber GLOB '[A-Za-z][A-Za-z][0-9][0-9]?[0-9]?[0-9]' OR                        -- Two letters followed by 1-4 digits, nothing after
          CallNumber GLOB '[A-Za-z][A-Za-z][0-9][0-9]?[0-9]?[0-9][A-Za-z \.]*' OR             -- Two letters, digits, followed by letter, space, or literal period
          CallNumber GLOB '[A-Za-z][A-Za-z][A-Za-z][0-9][0-9]?[0-9]?[0-9]' OR               -- Three letters followed by 1-4 digits, nothing after
          CallNumber GLOB '[A-Za-z][A-Za-z][A-Za-z][0-9][0-9]?[0-9]?[0-9][A-Za-z \.]*'       -- Three letters, digits, followed by letter, space, or literal period
      )

--- Simple count of resource types (eg book, journal, video, etc.
select resourcetype, count(resourcetype) from main group by resourcetype;

--- sample script showing join between main and kbid_isbn table
--- Finding holdings records that have neither a subject heading nor a "CallNumber" (actually UserDefinedField5, that UPEI uses to store LC call numbers)
--- but do have at least one ISBN, so hopefully are books
--- you might use this in conjunction with UPEI's Metadata Harvester to find LC call numbers to help in further subject classification of the ebook collection
select distinct ki.kbid, ki.isbn, m.subject, 
m.callnumber, m.PrintISBN, m.OnlineISBN from kbid_isbns ki 
left join main m on ki.kbid = m.KBID 
where m.subject = ''
and m.CallNumber = '' and 
(not m.OnlineISBN  = '' or not m.PrintISBN = '')
and not ki.kbid is null

--- a demonstration of using max with a field - can be useful to make sure you only get one output line per value in that column;
--- this also includes limiting to books published this century
--- and restricting the output to just some packages
--- an example use might be generating a tsv file for Gobi holdings loads (although maybe not with the packagename filter)

SELECT  DISTINCT max(isbn), k.kbid FROM kbid_isbns k 
JOIN main m ON (m.kbid = k.kbid)
WHERE  m.OnlineISBN IS NOT NULL AND m.ResourceType = 'Book' 
AND m.packagename IN ('EBSCO eBooks', 'ProQuest Ebook Central', 'ProQuest Ebook Central - Academic Complete', 'Project MUSE eBooks', 
'Books at JSTOR', 'Books at JSTOR: Evidence-Based Acquisition', 'Cambridge Books on Core', 
'Cambridge eBooks and Partner Presses: Humanities EBA, All Humanities', 'Cambridge eBooks and Partner Presses: Social Sciences EBA, All Social Sciences'
, 'Oxford Handbooks Online' , 'Oxford Clinical Psychology', 'Oxford Medicine Online', 
'Wiley Online Library Online Books', 'Wiley UBCM All Online Books')
AND substr(m.ManagedCoverageBegin,1,4) LIKE '20%'
GROUP BY k.kbid;

--- you can also hardcode a string as needed, eg for a gobi upload:
select distinct max(k.isbn) as ISBN, substr(m.packagename) as Fund, '62799' as Account 
from main m join kbid_isbn on (k.kbid = m.kbid)
where (substr(m.ManagedCoverageBegin,1,4) LIKE '20%' OR substr(m.ManagedCoverageBegin,1,4) LIKE '19%');
